---

name: Demo

on:
  pull_request:
    types: [opened, closed]
    branches: [ "staging", "production" ]
    
permissions:
  contents: read
  statuses: write

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Set environment
        id: env
        run: |
          if [ "${{ github.base_ref }}" = "main" ]; then
            echo "environment=production" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.base_ref }}" = "staging" ]; then
            echo "environment=staging" >> "$GITHUB_OUTPUT"
          fi
      - name: Show environment
        run: echo "Environment is ${{ steps.env.outputs.environment }}"

  build:
    needs: determine-environment
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    if: github.event.action == 'opened'
    permissions:
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
  
      - name: Lint code
        uses: github/super-linter@v7
        with:
          jscpd_threshold: 20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISABLE_LINTERS: YAML_PRETTIER
          
  
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Build frontend
        run: echo "Building fronend"

      - name: Unit tests frontend
        run: echo "Testing frontend"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
  
      - name: Install dependencies
        run: echo "Installing dependencies"

      - name: Unit tests backend
        run: echo "Testing backend"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build docker images
        run: echo "Building docker images"

      - name: Run docker with compose
        run: echo "Running docker compose"
      
      - name: Smoke test Frontend
        run: echo "Running smoke tests - Frontend"

      - name: Smoke test Backend
        run: echo "Running smoke tests - Backend"

      - name: Integration tests with compose
        run: echo "Running integration tests on compose"

      - name: Push to ECR
        run: echo "Pushing to ECR"
      
  deploy-plan:
    needs: [ determine-environment, build ]
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    if: github.event.action == 'opened'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5

      - name: Test terraform
        run: echo "Testing terraform"

      - name: Plan terraform
        run: echo "Planning terraform"
  
  deploy-apply:
    needs: [ determine-environment, deploy-plan ] 
    runs-on: ubuntu-latest
    environment: plan 
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    if: github.event.action == 'opened'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5

      - name: Apply terraform
        run: echo "Applying terraform"

      - name: Wait for instances to be ready
        run: echo "Waiting for instances to be ready"
  
  pull-images:
    needs: [ determine-environment, deploy-apply ] 
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}    
    if: github.event.action == 'opened'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5

      - name: Setup ansible
        run: echo "Setting up Ansible"

      - name: Get pool of ASG instances ips
        run: echo "Getting pool of ASG instances ips"

      - name: Pull images from ECR into instances via Ansible
        run: echo "Pulling images from ECR"

  integration-tests:
    needs: [ determine-environment, pull-images ] 
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    if: github.event.action == 'opened'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5

      - name: Run integration tests against deployed infrastructure
        run: echo "Running integration tests against deployed infrastructure"

  destroy-on-failure:
    needs: [ determine-environment, deploy-apply, pull-images, integration-tests ] 
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    if: needs.deploy-apply.result == 'failure' || needs.pull-images.result == 'failure' || needs.integration-tests.result == 'failure'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5

      - name: Destroy infrastructure
        run: echo "Destroying infrastructure"

  destroy-on-close:
    needs: determine-environment
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    if: github.event.action == 'closed' && github.base_ref == 'staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5

      - name: Destroy infrastructure
        run: echo "Destroying infrastructure"
